/*
auto-generated by: https://github.com/react-spring/gltfjsx
author: nrmotion (https://sketchfab.com/nrmotion)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/adult-fish-46-d57b8f44ce5748a0b0b8d015dbba7f3b
title: Adult- Fish-46
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, '/scene.gltf')

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      'GltfAnimation 0': mixer.clipAction(animations[0], group.current),
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[0, 0, 0]}>
            <group rotation={[0, 0, 0]}>
              <primitive object={nodes.GLTF_created_0_rootJoint} />
              <group position={[12.15, 30.71, 3.08]} rotation={[Math.PI, Math.PI / 2, 0]} />
              <group position={[12.15, 30.71, -3.04]} rotation={[Math.PI, Math.PI / 2, 0]} />
              <group position={[8.51, 36.11, 0.19]} rotation={[Math.PI, Math.PI / 2, 0]} />
              <group position={[17.65, -10.79, 0]} rotation={[Math.PI, Math.PI / 2, 0]} />
              <skinnedMesh
                material={materials.Testt}
                geometry={nodes.mesh_0.geometry}
                skeleton={nodes.mesh_0.skeleton}
              />
              <skinnedMesh
                material={materials.Testt}
                geometry={nodes.mesh_1.geometry}
                skeleton={nodes.mesh_1.skeleton}
              />
              <skinnedMesh
                material={materials.Testt}
                geometry={nodes.mesh_2.geometry}
                skeleton={nodes.mesh_2.skeleton}
              />
              <skinnedMesh
                material={materials.Testt}
                geometry={nodes.mesh_3.geometry}
                skeleton={nodes.mesh_3.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}
